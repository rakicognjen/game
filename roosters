class Rooster:
    def __init__(self, name, breed, strength):
        self.name = name
        self.breed = breed
        self.strength = strength
        self.health = 100
        self.is_knocked_out = False

    def __repr__(self):
        return f"{self.name} ({self.breed}) | Strength: {self.strength} | Health: {self.health}"

    def revive(self):
        self.is_knocked_out = False
        if self.health == 0:
            self.health = 1
        print(f"{self.name} was revived!")

    def knock_out(self):
        self.is_knocked_out = True
        if self.health != 0:
            self.health = 0
        print(f"{self.name} was knocked out!")

    def lose_health(self, amount):
        self.health -= amount
        if self.health <= 0:
            self.health = 0
            self.knock_out()
        else:
            print(f"{self.name} now has {self.health} health.")

    def gain_health(self, amount):
        if self.health == 0:
            self.revive()
        self.health += amount
        if self.health >= 100:
            self.health = 100
        print(f"{self.name} now has {self.health} health.")

    def attack(self, other_rooster):
        if self.is_knocked_out:
            print(f"{self.name} can't attack because it is knocked out!")
            return

        damage = self.strength
        other_rooster.lose_health(damage)
        print(f"{self.name} attacked {other_rooster.name} for {damage} damage!")

class RoosterFight:
    def __init__(self, rooster1, rooster2):
        self.rooster1 = rooster1
        self.rooster2 = rooster2

    def start_fight(self):
        while not self.rooster1.is_knocked_out and not self.rooster2.is_knocked_out:
            self.rooster1.attack(self.rooster2)
            if not self.rooster2.is_knocked_out:
                self.rooster2.attack(self.rooster1)

        if self.rooster1.is_knocked_out and self.rooster2.is_knocked_out:
            print("It's a tie! Both roosters are knocked out.")
        elif self.rooster1.is_knocked_out:
            print(f"{self.rooster2.name} wins the fight!")
        else:
            print(f"{self.rooster1.name} wins the fight!")

# Create two roosters
rooster1 = Rooster("Rocky", "Barred Plymouth Rock", 15)
rooster2 = Rooster("Feather", "Rhode Island Red", 12)

# Initialize the fight
fight = RoosterFight(rooster1, rooster2)

print("Welcome to the Rooster Fight!")
print("Here are the roosters:")
print(rooster1)
print(rooster2)

input("Press Enter to start the fight...")
fight.start_fight()

class Rooster:
    def __init__(self, name, breed, strength):
        self.name = name
        self.breed = breed
        self.strength = strength
        self.health = 100
        self.is_knocked_out = False

    def __repr__(self):
        return f"{self.name} ({self.breed}) | Strength: {self.strength} | Health: {self.health}"

    def revive(self):
        self.is_knocked_out = False
        if self.health == 0:
            self.health = 1
        print(f"{self.name} was revived!")

    def knock_out(self):
        self.is_knocked_out = True
        if self.health != 0:
            self.health = 0
        print(f"{self.name} was knocked out!")

    def lose_health(self, amount):
        self.health -= amount
        if self.health <= 0:
            self.health = 0
            self.knock_out()
        else:
            print(f"{self.name} now has {self.health} health.")

    def gain_health(self, amount):
        if self.health == 0:
            self.revive()
        self.health += amount
        if self.health >= 100:
            self.health = 100
        print(f"{self.name} now has {self.health} health.")

    def attack(self, other_rooster):
        if self.is_knocked_out:
            print(f"{self.name} can't attack because it is knocked out!")
            return

        damage = self.strength
        other_rooster.lose_health(damage)
        print(f"{self.name} attacked {other_rooster.name} for {damage} damage!")

class RoosterFight:
    def __init__(self, rooster1, rooster2):
        self.rooster1 = rooster1
        self.rooster2 = rooster2

    def start_fight(self):
        while not self.rooster1.is_knocked_out and not self.rooster2.is_knocked_out:
            self.rooster1.attack(self.rooster2)
            if not self.rooster2.is_knocked_out:
                self.rooster2.attack(self.rooster1)

        if self.rooster1.is_knocked_out and self.rooster2.is_knocked_out:
            print("It's a tie! Both roosters are knocked out.")
        elif self.rooster1.is_knocked_out:
            print(f"{self.rooster2.name} wins the fight!")
        else:
            print(f"{self.rooster1.name} wins the fight!")

# Create two roosters
rooster1 = Rooster("Rocky", "Barred Plymouth Rock", 15)
rooster2 = Rooster("Feather", "Rhode Island Red", 12)

# Initialize the fight
fight = RoosterFight(rooster1, rooster2)

print("Welcome to the Rooster Fight!")
print("Here are the roosters:")
print(rooster1)
print(rooster2)

input("Press Enter to start the fight...")
fight.start_fight()
